{"version":3,"sources":["parser/wordparser.ts","components/word.tsx","components/tags/tags.tsx","components/tooltip/tooltip.tsx","components/icon.tsx","parser/parser.ts","components/wordTable/header.tsx","storage/service.ts","components/modal/modal.tsx","components/wordcard/wordcard.tsx","components/wordTable/wordTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TokenKind","ps","className","map","p","i","wp","key","Piece","text","kana","Description","desc","split","s","TagComponent","tag","onDelete","name","onDoubleClick","tags","onAddition","t","id","allowNew","allowBackspace","tagComponent","autoResize","placeholderText","children","ele","tooltip","useState","active","setActive","onClick","props","icon","aria-hidden","QueryTokenKind","lexer","buildLexer","Character","LParen","RParen","apply","tok","v","Text","rep_sc","join","Annot","kmid","str","seq","opt_sc","anno","Pieces","vs","addWord","Buttons","NewWord","rtags","setRtags","descRef","useRef","contRef","error","setError","filter","_","j","onKeyDown","e","idx","current","selectionStart","value","slice","selectionEnd","ref","type","placeholder","content","input","expectSingleResult","expectEOF","parse","trim","description","then","Filter","spellCheck","vocabulary","localforage","createInstance","saveWord","word","a","setItem","Date","now","toString","newword","reviewtime","lastreview","updateWord","f","getItem","update","w","test","words","cond","iterate","push","removeItem","onClose","card","Card","prevWord","nextWord","review","index","reviewed","widx","length","hasPrev","hasNext","disableCls","cls","since","momentjs","fromNow","topRef","useEffect","focus","tabIndex","title","disabled","tagReview","setWords","_setWIdx","refreshSt","refresh","S","ws","setWIdx","delWord","nw","wi","activate","del","Entry","valign","stopPropagation","Controls","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.738bdd73.chunk.js","sourcesContent":["import { Parser } from 'typescript-parsec';\nimport { buildLexer, expectEOF, expectSingleResult } from 'typescript-parsec';\nimport { opt_sc, apply, kmid, rep_sc, seq, str, tok } from 'typescript-parsec';\nimport * as T from '../types'\n\nenum TokenKind {\n      Character\n    , LParen\n    , RParen\n}\n\nconst lexer = buildLexer([\n    [true, /^[^()]/g, TokenKind.Character],\n    [true, /^\\(/g, TokenKind.LParen],\n    [true, /^\\)/g, TokenKind.RParen],\n])\n\nexport type P<T> = Parser<TokenKind, T>\n\nconst Character: P<string> = apply(tok(TokenKind.Character), v => v.text)\n\nconst Text: P<string> = apply(rep_sc(Character), v=>v.join(''))\n\nconst Annot: P<string> = kmid(str<TokenKind>('('), Text, str(')'))\n\nconst Piece: P<T.WordPiece> = \n    apply(seq(Character, opt_sc(Annot)),\n        ([t, anno]) => (anno ? {text: t, kana: anno}: t))\n\nconst Pieces: P<T.WordPieces> = \n    apply(seq(Piece, rep_sc(Piece)), ([v, vs]) => [v, ...vs])\n\nexport default function (input: string): T.WordPieces{\n    return expectSingleResult(expectEOF(Pieces.parse(lexer.parse(input.trim()))))\n}\n","import React from 'react'\nimport * as T from '../types'\n\ntype Props = {ps: T.WordPieces}\n\nexport default ({ps}: Props) => {\n    return(\n        <span className=\"word-pieces\">\n            {ps.map((p, i) => (<Piece wp={p} key={i}/>))}\n        </span>\n    )\n}\n\nconst Piece = ({wp}: {wp: T.WordPiece}) => {\n    if (typeof wp === \"string\"){\n        return (<ruby>{wp}</ruby>)\n    }\n    const {text, kana} = wp\n    return (<ruby>{text} <rt>{kana}</rt> </ruby>)\n}\n\nexport const Description = ({desc}:{desc: string}) => {\n    return(\n        <>{desc.split(\"\\n\").map((s, i) => <p key={i}>{s}</p>)}</>\n    )\n}","import React from 'react'\nimport ReactTags from 'react-tag-autocomplete'\n\nimport {Tag} from '../../types'\nimport Icon from '../icon'\nimport './tags.scss'\n\n\n\nconst TagComponent = ({ tag, onDelete}: {tag: Tag, onDelete: any}) => {\n    return (\n      <div className=\"word-tag\">\n        {tag.name}\n        <span className=\"word-tag-del\" onDoubleClick={onDelete}>✕</span>\n      </div>\n    )\n}\n\ntype Props = {\n      tags: string[]\n    , onDelete: (i:number)=>void\n    , onAddition: (tag: Tag)=>void\n    }\n\nexport default ({tags, onDelete, onAddition}: Props) => {\n\n    return(\n        <ReactTags \n            tags={tags.map(t=>({id: t, name: t}))}\n            onDelete={onDelete}\n            onAddition={onAddition}\n            allowNew={true}\n            allowBackspace={false}\n            tagComponent={TagComponent}\n            autoResize={true}\n            placeholderText=\"       \"\n        />\n    )\n}","import React, {useState} from 'react'\nimport './tooltip.scss'\n\ntype Props = {children: [JSX.Element, JSX.Element]}\n\nexport default ({children}: Props)=>{\n    const [ele, tooltip] = children\n    const [active, setActive] = useState(false)\n    return(\n        <div className={active ? \"tooltip-wrapper active\": \"tooltip-wrapper\"}>\n            <div \n                className={active ? \"tooltip-ele active\" : \"tooltip-ele\"} \n                onClick={()=>setActive(!active)}>\n                {ele}\n            </div>\n            <div className=\"tooltip-tooltip\">\n                {tooltip}\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nexport default (props: {icon: string}) => {\n    const {icon} = props\n    return (<i {...props} className={`fa fa-${icon}`} aria-hidden=\"true\" />)\n}","export {default as parseWordPieces} from './wordparser'\n\n\nenum QueryTokenKind {\n    Number,\n    Add,\n    Sub,\n    Mul,\n    Div,\n    LParen,\n    RParen,\n    Space,\n    kana,\n}","import React, {useState, useRef} from 'react'\nimport './header.scss'\nimport Tooltip from '../tooltip/tooltip'\nimport Icon from '../icon'\nimport Tags from '../tags/tags'\nimport * as T from '../../types'\nimport {parseWordPieces} from '../../parser/parser'\n\n\ntype Props = {addWord: AddWord}\n\ntype AddWord = (w: T.WordInfo)=>Promise<void>\n\nexport default ({addWord}: Props) => {\n    return(\n        <div className=\"header\">\n            <Buttons addWord={addWord}/>\n            <Filter/>\n        </div>\n    )\n}\n\nconst Buttons = ({addWord}: {addWord: AddWord}) =>{\n    return(\n        <div className=\"header-buttons\">\n            <Tooltip>\n                <button className=\"add\"><Icon icon=\"plus\"/></button>\n                <NewWord addWord={addWord}/>\n            </Tooltip>\n        </div>\n    )\n}\n\nconst NewWord = ({addWord}: {addWord: AddWord}) => {\n    const [rtags, setRtags] = useState([] as string[])\n    const descRef = useRef() as React.MutableRefObject<HTMLTextAreaElement>\n    const contRef = useRef() as React.MutableRefObject<HTMLInputElement>\n    const [error, setError] = useState(false)\n    const delTag = (i:number) =>{\n        setRtags(rtags.filter((_, j)=>j!==i))\n    }\n    const addTag = (tag: T.Tag)=>{\n        setRtags([...rtags, tag.name])\n    }\n    const parenShortcut = (e: React.KeyboardEvent) =>{\n        if (e.key===\"Escape\"){\n            const idx = contRef.current.selectionStart\n            if (idx !== null){\n                const text = contRef.current.value\n                contRef.current.value=text.slice(0, idx) + \"()\" + text.slice(idx)\n                contRef.current.selectionStart = idx + 1\n                contRef.current.selectionEnd = idx + 1\n            }\n        }\n        setError(false)\n    }\n    const create = () => {\n        try{\n            const content = parseWordPieces(contRef.current.value)\n            const description = descRef.current.value\n            addWord({content, description, tags: rtags})\n            .then(()=>{contRef.current.value=\"\"; descRef.current.value=\"\"})\n        } catch(e){\n            setError(true)\n        }\n    }\n    return(\n        <div className=\"newword-form\">\n            <Tags \n                tags={rtags}\n                onDelete={delTag}\n                onAddition={addTag}\n            />\n\n            <div className=\"label\">Word</div>\n            <input \n                onKeyDown={parenShortcut} \n                ref={contRef} \n                type=\"text\" \n                className={error ? \"word-input error\" : \"word-input\"}\n                placeholder=\"e.g. 見(み)る. Press [Esc] to insert ()\"\n            />\n            <div className=\"label\">Definition</div>\n            <textarea ref={descRef}/>\n            <button className=\"save\" onClick={create}><Icon icon=\"save\"/></button>\n        </div>\n    )\n}\n\n\nconst Filter = () => {\n    return(\n        <div className=\"header-query\">\n            <input type=\"text\" spellCheck={false} placeholder=\"Input query...\"/>\n            <span className=\"icon\"><Icon icon=\"search\"/></span>\n        </div>\n    )\n}\n\n\n","import localforage from 'localforage'\nimport * as T from '../types'\n\nconst vocabulary = localforage.createInstance({\n    name: \"vocabulary\"\n  });\n\nexport async function saveWord(key: string, word: T.Word){\n    await vocabulary.setItem(key, word)\n    return key\n}\n\nexport async function addWord(word: T.WordInfo){\n    const key = Date.now().toString()\n    const newword: T.Word = {...word, reviewtime: 1, lastreview: new Date()}\n    await saveWord(key, newword)\n    return {key, value: newword} as T.KeyValue<T.Word>\n}\n\nexport async function updateWord(key: string, f: (w:T.Word)=> T.Word){\n    const newword = f(await vocabulary.getItem(key) as T.Word)\n    await saveWord(key, newword)\n    return newword\n}\n\nexport async function reviewWord(key: string){\n    const update = (w: T.Word) => {\n        w.reviewtime += 1\n        w.lastreview = new Date()\n        return w\n    }\n    return await updateWord(key, update)\n}\n\nexport async function updateWordField<K extends keyof T.Word, V extends T.Word[K]>(key: string, field: K, val: V){\n    const update = (w: T.Word) => {\n        w[field] = val\n        return w\n    }\n    return await updateWord(key, update)\n}\n\nexport async function listWords(test ?: (w: T.Word)=>boolean){\n    var words: T.KeyValue<T.Word>[] = []\n    const cond = test ? test : (()=>true)\n    await vocabulary.iterate((value: T.Word, key)=>{\n        if (cond(value)){\n            words.push({key, value})\n        }\n    })\n    return words\n}\n\n\nexport async function delWord(key: string){\n    return await vocabulary.removeItem(key)\n}","import React from 'react'\nimport './modal.scss'\n\ntype Props = {content: JSX.Element | null, onClose: ()=>void}\nexport default ({content, onClose}: Props) =>{\n    if (content === null) {return (<></>)}\n    return(\n        <div \n            className=\"modal\" \n            // tabIndex={0}\n            onKeyDown={e=>{if (e.key===\"Escape\") onClose()}}\n        >\n            <div className=\"modal-content\">\n                {content}\n            </div>\n        </div>\n    )\n}\n","import React, {useEffect, useRef} from 'react'\nimport momentjs from 'moment'\nimport Modal from '../modal/modal'\nimport Tags from '../tags/tags'\nimport * as T from '../../types'\nimport './wordcard.scss'\nimport Content, {Description} from '../word'\nimport Icon from '../icon'\n\n\ntype Props = {\n      word: T.WordEntry\n    , nextWord: ()=>void\n    , prevWord: ()=>void\n    , onClose: ()=>void\n    , review: ()=>void\n    , index: {widx: number, length: number}\n}\n\nexport default (props: Props) => {\n    const {word, onClose} = props\n    const card = word === null ? null : (<Card {...props}/>)\n    return(\n        <Modal content={card} onClose={onClose}/>\n    )\n}\n\nconst Card = ({word, prevWord, nextWord, onClose, review, index}: Props)=>{\n    const {value:{content, description, tags, lastreview, reviewtime}, reviewed} = word\n    const {widx, length} = index\n\n    const hasPrev = widx > 0\n    const hasNext = widx < length - 1\n    const disableCls = (test: boolean, cls: string) => cls + (test ? \" disabled\" :  \"\")\n\n    const since = momentjs(lastreview).fromNow()\n\n    const topRef = useRef(null as HTMLDivElement | null)\n\n    useEffect(()=>{\n        topRef.current?.focus()\n    }, [])\n\n    const handleKeydown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        switch (e.key){\n            case \"a\":\n                prevWord()\n                break\n            case \"s\":\n                review()\n                break\n            case \"d\":\n                nextWord()\n        }\n    }\n\n    return(\n        <div \n            className={reviewed? \"wordcard-wrapper reviewed\" : \"wordcard-wrapper\"}\n            onKeyDown={handleKeydown}\n            tabIndex={0}\n            ref={topRef}\n        >\n            <button className=\"close\" \n                    onClick={onClose}\n            >&times;</button>\n            <div className=\"info\">\n                Reviewed {since}\n            </div>\n            <div className=\"wordcard-nav\">\n\n                <div className=\"wordcard\">                    \n                    <div className=\"content\">\n                        <Content ps={content}/>\n                    </div>\n                    <div className=\"tags\">\n                        {tags.map((t, i)=><span key={i}>{t}</span>)}\n                    </div>\n                    <div className=\"description\">\n                        <Description desc={description}/>\n                    </div>\n                    <div className=\"buttons\">\n                        <button title=\"S\" disabled={reviewed} onClick={review}>Review {reviewtime}</button>\n                    </div>\n                </div>\n                <div className={disableCls(hasPrev, \"nav-left\")} onClick={prevWord} title=\"A\">\n                    <Icon icon=\"chevron-left\"/>\n                </div>\n                <div className={disableCls(hasNext, \"nav-right\")} onClick={nextWord} title=\"D\">\n                    <Icon icon=\"chevron-right\"/>\n                </div>\n                <div className =\"index\">\n                    {widx+1} / {length}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react';\nimport * as T from '../../types'\nimport Word from '../word'\nimport Tags from '../tags/tags'\nimport Header from './header'\nimport './wordTable.scss'\nimport * as S from '../../storage/service'\nimport WordCard from '../wordcard/wordcard'\nimport Icon from '../icon'\n\ntype Props = {}\n\nfunction tagReview(w: T.KeyValue<T.Word>):T.WordEntry{\n    return {...w, reviewed: false}\n}\n\nexport default ({}: Props) => {\n    const [words, setWords] = useState([] as T.WordEntry[])\n    const [query, setQuery] = useState(\"\")\n    const [widx, _setWIdx] = useState(null as number | null)\n    const [refreshSt, refresh] = useState(false)\n    useEffect(()=>{\n        S.listWords().then(ws => setWords(ws.map(tagReview)))\n    }, [])\n\n    const setWIdx = (i: number | null) => {\n        if (i === null) _setWIdx(null)\n        else if (0 <= i && i < words.length) _setWIdx(i)\n    }\n\n    const addWord = (w: T.WordInfo) => {\n        return S.addWord(w).then(wi => setWords([tagReview(wi), ...words]))\n    }\n\n    const delWord = (i: number) => {\n        return () => {\n            S.delWord(words[i].key).then(() => {\n                setWords(words.filter((_,j)=>i!==j))\n            })\n        }\n    }\n\n    const review = (i: number | null) => {\n        if (i !==null && !words[i].reviewed) {\n            const key = words[i].key\n            S.reviewWord(key)\n            .then((nw)=>{\n                words[i]={key, value: nw, reviewed: true}\n                refresh(!refreshSt)\n            })\n        }\n    }\n\n    return(\n        <>\n        <div className=\"vocabulary\">\n            <Header addWord={addWord}/>\n            <table className=\"word-table\">\n                <thead>\n                    <tr>\n                        <th>Word</th>\n                        <th>Description</th>\n                        <th>Tags</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {words.map((w, i) => (\n                        <Entry \n                            word={w} \n                            key={w.key}\n                            activate={()=>{setWIdx(i)}}\n                            del={delWord(i)}\n                            review={()=>review(i)}\n                        />))\n                    }\n                </tbody>\n            </table>\n        </div>\n        {(widx!==null)?\n        <WordCard\n            onClose={()=>{setWIdx(null)}}\n            nextWord={()=>{setWIdx(widx+1)}}\n            prevWord={()=>{setWIdx(widx-1)}}\n            review={()=>review(widx)}\n            word={words[widx]}\n            index={{widx, length: words.length}}\n        />: <></>}\n        </>\n    )\n}\n\n\nconst Entry = ({\n    word, activate, del, review}: \n    {word: T.WordEntry, activate: ()=>void, del: ()=>void, review: ()=>void}) => {\n    const {content, tags, description} = word.value\n    const reviewed = word.reviewed\n    const [rtags, setRtags] = useState(tags)\n    const onAddition = (tag: T.Tag) => {\n        setRtags([...rtags, tag.name])\n    }\n    const onDelete = (i:number) => {\n        setRtags(rtags.filter((tag, index) => index !== i))\n    }\n    return(\n        <tr onClick={activate} className={reviewed ? \"reviewed\" : \"\"}>\n            <td>{<Word ps={content}/>}</td>\n            <td>{description}</td>\n            <td valign=\"top\" onClick={e=>e.stopPropagation()}>\n                <Tags\n                    onAddition={onAddition}\n                    onDelete={onDelete}\n                    tags={rtags}\n                />\n            </td>\n            <td onClick={e=>e.stopPropagation()}>\n                <Controls del={del} review={review} reviewed={reviewed}/>\n            </td>\n        </tr>\n    )\n}\n\n\nconst Controls = ({del, review, reviewed}\n                : {del: ()=>void, review: ()=>void, reviewed: boolean}) => \n{\n    return(\n        <div className=\"controls\">\n            <button className=\"edit\"><Icon icon=\"pen-alt\"/></button>\n            <button \n                className=\"review\"\n                onClick={review}\n            ><Icon icon={reviewed ? \"book-open\" : \"book\"}/></button>\n            <button \n                className=\"delete\"\n                onDoubleClick={del}\n                ><Icon icon=\"trash-alt\"/>\n            </button>\n        </div>\n    )\n}","import React from 'react';\nimport WordTable from './components/wordTable/wordTable'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <WordTable/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}